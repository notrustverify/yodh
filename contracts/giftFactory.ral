
const ALPH_PRICE_DECIMALS = 1e3

Contract GiftFactory (
    oracle: IDIAOracle,
    giftTemplate: Gift
   ) {
    
    event GiftCreated(newGiftId: ByteVec, by: Address)

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn createGift(
        // Variables to initialise contract
        hashedSecret: ByteVec,
        announcementLockIntervall: U256,
        version: U256,  // To ensure future compatibility
        isCancellable: Bool,

        // Variable related to announcement and claim
        announcedAddress: Address,
        announcementLockedUntil: U256,
        givenTokenId: ByteVec
    ) -> Gift {
        let caller = callerAddress!()
        let giftTemplateId = contractId!(giftTemplate)

        if (givenTokenId == ALPH) {
            let alphUsdPrice = oracle.getValue(b`ALPH/USD`).value
            let alphAmount = tokenRemaining!(caller, ALPH) // expensive to do this, better to use amount in parameters
            let mut initialUsdPrice = 0
            if ( alphUsdPrice > 0 ) {
               initialUsdPrice = alphAmount / (alphUsdPrice*ALPH_PRICE_DECIMALS) // storing alph price in int
            }

            let (encodedImmFields, encodedMutFields) = Gift.encodeFields!(
                caller,
                hashedSecret,
                announcementLockIntervall,
                version,
                isCancellable,
                initialUsdPrice,
                announcedAddress,
                announcementLockedUntil
            )

            let contractId = copyCreateContract!{
                caller -> ALPH: alphAmount
            }(
                giftTemplateId,
                encodedImmFields,
                encodedMutFields
            )

            emit GiftCreated(contractId, caller)

            return Gift(contractId)   
        }
        else {
            let initialUsdPrice = 0

            let (encodedImmFields, encodedMutFields) = Gift.encodeFields!(
                caller,
                hashedSecret,
                announcementLockIntervall,
                version,
                isCancellable,
                initialUsdPrice,
                announcedAddress,
                announcementLockedUntil
            )

            let contractId = copyCreateContract!{
                caller -> ALPH: minimalContractDeposit!(), givenTokenId: tokenRemaining!(caller, givenTokenId)
            }(
                giftTemplateId,
                encodedImmFields,
                encodedMutFields
            )

            emit GiftCreated(contractId, caller)

            return Gift(contractId)
        }
    }
}
