/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as Giftv2ContractJson } from "../Giftv2.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, AllStructs } from "./types";

// Custom types for the contract
export namespace Giftv2Types {
  export type Fields = {
    sender: Address;
    hashedSecret: HexString;
    announcementLockIntervall: bigint;
    version: bigint;
    isCancellable: boolean;
    initialUsdPrice: bigint;
    announcedAddress: Address;
    announcementLockedUntil: bigint;
  };

  export type State = ContractState<Fields>;

  export type DepositEvent = ContractEvent<{
    by: Address;
    amount: bigint;
    tokenId: HexString;
  }>;
  export type LockEvent = ContractEvent<{ by: Address; until: bigint }>;
  export type WithdrawEvent = ContractEvent<{ by: Address }>;
  export type CancelEvent = ContractEvent<{}>;

  export interface CallMethodTable {
    deposit: {
      params: CallContractParams<{ tokenId: HexString }>;
      result: CallContractResult<null>;
    };
    announce: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{ secret: HexString; to: Address }>;
      result: CallContractResult<null>;
    };
    resetLock: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    cancel: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    getInitialUsdPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getVersion: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    isCancellable: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    deposit: {
      params: SignExecuteContractMethodParams<{ tokenId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    announce: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{
        secret: HexString;
        to: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    resetLock: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    cancel: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getInitialUsdPrice: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getVersion: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    isCancellable: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<Giftv2Instance, Giftv2Types.Fields> {
  encodeFields(fields: Giftv2Types.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { Deposit: 0, Lock: 1, Withdraw: 2, Cancel: 3 };
  consts = {
    ErrorCodes: {
      GiftLocked: BigInt("0"),
      UnannouncedCaller: BigInt("1"),
      WrongSecret: BigInt("2"),
      CallerIsNotSender: BigInt("3"),
      CancelIsNotAllowed: BigInt("4"),
    },
  };

  at(address: string): Giftv2Instance {
    return new Giftv2Instance(address);
  }

  tests = {
    deposit: async (
      params: TestContractParamsWithoutMaps<
        Giftv2Types.Fields,
        { tokenId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
    announce: async (
      params: Omit<
        TestContractParamsWithoutMaps<Giftv2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "announce", params, getContractByCodeHash);
    },
    withdraw: async (
      params: TestContractParamsWithoutMaps<
        Giftv2Types.Fields,
        { secret: HexString; to: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    resetLock: async (
      params: Omit<
        TestContractParamsWithoutMaps<Giftv2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "resetLock", params, getContractByCodeHash);
    },
    cancel: async (
      params: Omit<
        TestContractParamsWithoutMaps<Giftv2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "cancel", params, getContractByCodeHash);
    },
    getInitialUsdPrice: async (
      params: Omit<
        TestContractParamsWithoutMaps<Giftv2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getInitialUsdPrice",
        params,
        getContractByCodeHash
      );
    },
    getVersion: async (
      params: Omit<
        TestContractParamsWithoutMaps<Giftv2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getVersion", params, getContractByCodeHash);
    },
    isCancellable: async (
      params: Omit<
        TestContractParamsWithoutMaps<Giftv2Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "isCancellable", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: Giftv2Types.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const Giftv2 = new Factory(
  Contract.fromJson(
    Giftv2ContractJson,
    "",
    "0c1ef7554df27e9220c0aaea672c8fc93f5e4d58d72cbe48f50d6fe727371672",
    AllStructs
  )
);
registerContract(Giftv2);

// Use this class to interact with the blockchain
export class Giftv2Instance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<Giftv2Types.State> {
    return fetchContractState(Giftv2, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeDepositEvent(
    options: EventSubscribeOptions<Giftv2Types.DepositEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Giftv2.contract,
      this,
      options,
      "Deposit",
      fromCount
    );
  }

  subscribeLockEvent(
    options: EventSubscribeOptions<Giftv2Types.LockEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Giftv2.contract,
      this,
      options,
      "Lock",
      fromCount
    );
  }

  subscribeWithdrawEvent(
    options: EventSubscribeOptions<Giftv2Types.WithdrawEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Giftv2.contract,
      this,
      options,
      "Withdraw",
      fromCount
    );
  }

  subscribeCancelEvent(
    options: EventSubscribeOptions<Giftv2Types.CancelEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Giftv2.contract,
      this,
      options,
      "Cancel",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | Giftv2Types.DepositEvent
      | Giftv2Types.LockEvent
      | Giftv2Types.WithdrawEvent
      | Giftv2Types.CancelEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Giftv2.contract, this, options, fromCount);
  }

  view = {
    deposit: async (
      params: Giftv2Types.CallMethodParams<"deposit">
    ): Promise<Giftv2Types.CallMethodResult<"deposit">> => {
      return callMethod(Giftv2, this, "deposit", params, getContractByCodeHash);
    },
    announce: async (
      params?: Giftv2Types.CallMethodParams<"announce">
    ): Promise<Giftv2Types.CallMethodResult<"announce">> => {
      return callMethod(
        Giftv2,
        this,
        "announce",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: Giftv2Types.CallMethodParams<"withdraw">
    ): Promise<Giftv2Types.CallMethodResult<"withdraw">> => {
      return callMethod(
        Giftv2,
        this,
        "withdraw",
        params,
        getContractByCodeHash
      );
    },
    resetLock: async (
      params?: Giftv2Types.CallMethodParams<"resetLock">
    ): Promise<Giftv2Types.CallMethodResult<"resetLock">> => {
      return callMethod(
        Giftv2,
        this,
        "resetLock",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    cancel: async (
      params?: Giftv2Types.CallMethodParams<"cancel">
    ): Promise<Giftv2Types.CallMethodResult<"cancel">> => {
      return callMethod(
        Giftv2,
        this,
        "cancel",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getInitialUsdPrice: async (
      params?: Giftv2Types.CallMethodParams<"getInitialUsdPrice">
    ): Promise<Giftv2Types.CallMethodResult<"getInitialUsdPrice">> => {
      return callMethod(
        Giftv2,
        this,
        "getInitialUsdPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getVersion: async (
      params?: Giftv2Types.CallMethodParams<"getVersion">
    ): Promise<Giftv2Types.CallMethodResult<"getVersion">> => {
      return callMethod(
        Giftv2,
        this,
        "getVersion",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    isCancellable: async (
      params?: Giftv2Types.CallMethodParams<"isCancellable">
    ): Promise<Giftv2Types.CallMethodResult<"isCancellable">> => {
      return callMethod(
        Giftv2,
        this,
        "isCancellable",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    deposit: async (
      params: Giftv2Types.SignExecuteMethodParams<"deposit">
    ): Promise<Giftv2Types.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(Giftv2, this, "deposit", params);
    },
    announce: async (
      params: Giftv2Types.SignExecuteMethodParams<"announce">
    ): Promise<Giftv2Types.SignExecuteMethodResult<"announce">> => {
      return signExecuteMethod(Giftv2, this, "announce", params);
    },
    withdraw: async (
      params: Giftv2Types.SignExecuteMethodParams<"withdraw">
    ): Promise<Giftv2Types.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(Giftv2, this, "withdraw", params);
    },
    resetLock: async (
      params: Giftv2Types.SignExecuteMethodParams<"resetLock">
    ): Promise<Giftv2Types.SignExecuteMethodResult<"resetLock">> => {
      return signExecuteMethod(Giftv2, this, "resetLock", params);
    },
    cancel: async (
      params: Giftv2Types.SignExecuteMethodParams<"cancel">
    ): Promise<Giftv2Types.SignExecuteMethodResult<"cancel">> => {
      return signExecuteMethod(Giftv2, this, "cancel", params);
    },
    getInitialUsdPrice: async (
      params: Giftv2Types.SignExecuteMethodParams<"getInitialUsdPrice">
    ): Promise<Giftv2Types.SignExecuteMethodResult<"getInitialUsdPrice">> => {
      return signExecuteMethod(Giftv2, this, "getInitialUsdPrice", params);
    },
    getVersion: async (
      params: Giftv2Types.SignExecuteMethodParams<"getVersion">
    ): Promise<Giftv2Types.SignExecuteMethodResult<"getVersion">> => {
      return signExecuteMethod(Giftv2, this, "getVersion", params);
    },
    isCancellable: async (
      params: Giftv2Types.SignExecuteMethodParams<"isCancellable">
    ): Promise<Giftv2Types.SignExecuteMethodResult<"isCancellable">> => {
      return signExecuteMethod(Giftv2, this, "isCancellable", params);
    },
  };

  async multicall<Calls extends Giftv2Types.MultiCallParams>(
    calls: Calls
  ): Promise<Giftv2Types.MultiCallResults<Calls>>;
  async multicall<Callss extends Giftv2Types.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<Giftv2Types.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends Giftv2Types.MultiCallParams | Giftv2Types.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(Giftv2, this, callss, getContractByCodeHash);
  }
}
