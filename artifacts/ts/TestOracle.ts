/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TestOracleContractJson } from "../TestOracle.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, AllStructs } from "./types";

// Custom types for the contract
export namespace TestOracleTypes {
  export type Fields = {
    initialValue: DIAOracleValue;
  };

  export type State = ContractState<Fields>;

  export type QueriedOracleEvent = ContractEvent<{
    by: Address;
    key: HexString;
  }>;

  export interface CallMethodTable {
    getValue: {
      params: CallContractParams<{ key: HexString }>;
      result: CallContractResult<DIAOracleValue>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getValue: {
      params: SignExecuteContractMethodParams<{ key: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  TestOracleInstance,
  TestOracleTypes.Fields
> {
  encodeFields(fields: TestOracleTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { QueriedOracle: 0 };

  at(address: string): TestOracleInstance {
    return new TestOracleInstance(address);
  }

  tests = {
    getValue: async (
      params: TestContractParamsWithoutMaps<
        TestOracleTypes.Fields,
        { key: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<DIAOracleValue>> => {
      return testMethod(this, "getValue", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: TestOracleTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const TestOracle = new Factory(
  Contract.fromJson(
    TestOracleContractJson,
    "",
    "49fe5214cf690f6347c928f5af895fa89986f51d5c25584cd4e6369e6e5c8c07",
    AllStructs
  )
);
registerContract(TestOracle);

// Use this class to interact with the blockchain
export class TestOracleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TestOracleTypes.State> {
    return fetchContractState(TestOracle, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeQueriedOracleEvent(
    options: EventSubscribeOptions<TestOracleTypes.QueriedOracleEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TestOracle.contract,
      this,
      options,
      "QueriedOracle",
      fromCount
    );
  }

  view = {
    getValue: async (
      params: TestOracleTypes.CallMethodParams<"getValue">
    ): Promise<TestOracleTypes.CallMethodResult<"getValue">> => {
      return callMethod(
        TestOracle,
        this,
        "getValue",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getValue: async (
      params: TestOracleTypes.SignExecuteMethodParams<"getValue">
    ): Promise<TestOracleTypes.SignExecuteMethodResult<"getValue">> => {
      return signExecuteMethod(TestOracle, this, "getValue", params);
    },
  };

  async multicall<Calls extends TestOracleTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TestOracleTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends TestOracleTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<TestOracleTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | TestOracleTypes.MultiCallParams
      | TestOracleTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      TestOracle,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
